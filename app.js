// –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const appData = {
  defaultBookmarks: [
    { id: "1", name: "YouTube", url: "https://youtube.com" },
    { id: "2", name: "VK", url: "https://vk.com" },
    { id: "3", name: "Mail.ru", url: "https://mail.ru" },
    { id: "4", name: "GitHub", url: "https://github.com" },
    { id: "5", name: "Wikipedia", url: "https://ru.wikipedia.org" }
  ],
  yandexServices: [
    { name: "–ö–∞—Ä—Ç—ã", url: "https://maps.yandex.ru", icon: "üó∫Ô∏è" },
    { name: "–ü–æ—á—Ç–∞", url: "https://mail.yandex.ru", icon: "‚úâÔ∏è" },
    { name: "–ü–æ–≥–æ–¥–∞", url: "https://yandex.ru/pogoda", icon: "üå§Ô∏è" },
    { name: "–ú—É–∑—ã–∫–∞", url: "https://music.yandex.ru", icon: "üéµ" },
    { name: "–î–∏—Å–∫", url: "https://disk.yandex.ru", icon: "üíæ" }
  ],
  googleServices: [
    { name: "Gmail", url: "https://mail.google.com", icon: "‚úâÔ∏è" },
    { name: "–ö–æ–Ω—Ç–∞–∫—Ç—ã", url: "https://contacts.google.com", icon: "üë§" },
    { name: "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", url: "https://translate.google.com", icon: "üî§" },
    { name: "–§–æ—Ç–æ", url: "https://photos.google.com", icon: "üì∑" },
    { name: "–î–∏—Å–∫", url: "https://drive.google.com", icon: "üíæ" },
    { name: "Keep", url: "https://keep.google.com", icon: "üìù" },
    { name: "Play –ú–∞—Ä–∫–µ—Ç", url: "https://play.google.com", icon: "üì±" },
    { name: "YouTube", url: "https://youtube.com", icon: "‚ñ∂Ô∏è" }
  ]
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ
let editingBookmarkIndex = -1;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
document.addEventListener("DOMContentLoaded", () => {
  initializeApp();
});

function initializeApp() {
  loadCurrencyRates();       // –ö—É—Ä—Å—ã –¶–ë –†–§
  renderYandexServices();    // –ü–ª–∏—Ç–∫–∏ –Ø–Ω–¥–µ–∫—Å-—Å–µ—Ä–≤–∏—Å–æ–≤ (—Å—Å—ã–ª–∫–∏ –≤ —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ)
  initializeBookmarks();     // –õ–æ–∫–∞–ª—å–Ω—ã–µ –∑–∞–∫–ª–∞–¥–∫–∏
  setupEventListeners();     // –ú–æ–¥–∞–ª–∫–∏ –∏ —Ç.–ø.
  setupGoogleServices();     // –ó–∞–≥–ª—É—à–∫–∞ ‚Äî —Å–µ–π—á–∞—Å —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–∏—á–µ–Ω –≤ HTML
}

/* ================= –£–¢–ò–õ–ò–¢–´ ================= */

function getFaviconUrl(url) {
  try {
    const domain = new URL(url).hostname;
    return `https://www.google.com/s2/favicons?sz=32&domain_url=${domain}`;
  } catch {
    return "data:image/svg+xml,";
  }
}

/* ============== –ö–£–†–°–´ –í–ê–õ–Æ–¢ (–¶–ë –†–§) ============== */

async function loadCurrencyRates() {
  const usdEl = document.getElementById("usd-rate");
  const eurEl = document.getElementById("eur-rate");

  try {
    const resp = await fetch("https://www.cbr-xml-daily.ru/daily_json.js", { cache: "no-store" });
    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
    const data = await resp.json();

    const usd = data?.Valute?.USD?.Value;
    const eur = data?.Valute?.EUR?.Value;

    usdEl.textContent = typeof usd === "number" ? usd.toFixed(2) : "–Ω/–¥";
    eurEl.textContent = typeof eur === "number" ? eur.toFixed(2) : "–Ω/–¥";
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—É—Ä—Å–æ–≤ –¶–ë:", e);
    if (usdEl) usdEl.textContent = "–Ω/–¥";
    if (eurEl) eurEl.textContent = "–Ω/–¥";
  }
}

/* ============== –Ø–ù–î–ï–ö–°-–°–ï–†–í–ò–°–´ ============== */

function renderYandexServices() {
  const grid = document.getElementById("yandex-services-grid");
  if (!grid) return;
  grid.innerHTML = "";

  appData.yandexServices.forEach(s => {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É <a> ‚Äî –õ–ö–ú –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤ —ç—Ç–æ–π –≤–∫–ª–∞–¥–∫–µ, —Å—Ä–µ–¥–Ω—è—è ‚Äî –≤ –Ω–æ–≤–æ–π.
    const a = document.createElement("a");
    a.className = "service-item";
    a.href = s.url; // –±–µ–∑ target ‚Äî —Ç–µ–∫—É—â–∞—è –≤–∫–ª–∞–¥–∫–∞
    a.innerHTML = `
      <div class="service-icon">${s.icon}</div>
      <div class="service-name">${s.name}</div>
    `;
    grid.appendChild(a);
  });
}

/* ============== –ó–ê–ö–õ–ê–î–ö–ò ============== */

function initializeBookmarks() {
  const stored = JSON.parse(localStorage.getItem("bookmarks") || "[]");
  if (!stored.length) {
    localStorage.setItem("bookmarks", JSON.stringify(appData.defaultBookmarks));
  }
  renderBookmarks();
}

function renderBookmarks() {
  const grid = document.getElementById("bookmarks-grid");
  if (!grid) return;

  const data = JSON.parse(localStorage.getItem("bookmarks") || "[]");
  grid.innerHTML = "";

  data.forEach((b, idx) => {
    const item = document.createElement("div");
    item.className = "bookmark-item";
    item.draggable = true;
    item.dataset.index = idx;

    item.innerHTML = `
      <img class="bookmark-icon" alt="" src="${getFaviconUrl(b.url)}"/>
      <div class="bookmark-name">${b.name}</div>
      <div class="bookmark-actions">
        <button class="bookmark-edit" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">‚úé</button>
        <button class="bookmark-delete" title="–£–¥–∞–ª–∏—Ç—å">‚úï</button>
      </div>
    `;

    // –õ–ö–ú ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
    item.addEventListener("click", (e) => {
      if (e.target.closest(".bookmark-actions")) return;
      location.href = b.url;
    });

    // –°—Ä–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ (–¥–ª—è div –¥–µ–ª–∞–µ–º –≤—Ä—É—á–Ω—É—é)
    item.addEventListener("mousedown", (e) => {
      if (e.button === 1) {
        e.preventDefault();
        window.open(b.url, "_blank", "noopener");
      }
    });

    // –ö–Ω–æ–ø–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    item.querySelector(".bookmark-edit").addEventListener("click", (e) => {
      e.stopPropagation();
      openEditBookmark(idx);
    });
    item.querySelector(".bookmark-delete").addEventListener("click", (e) => {
      e.stopPropagation();
      deleteBookmark(idx);
    });

    // Drag & drop
    item.addEventListener("dragstart", dragStart);
    item.addEventListener("dragover", dragOver);
    item.addEventListener("drop", drop);
    item.addEventListener("dragend", dragEnd);

    grid.appendChild(item);
  });
}

function setupEventListeners() {
  const addBtn = document.getElementById("add-bookmark-btn");
  const addModal = document.getElementById("addBookmarkModal");
  const editModal = document.getElementById("editBookmarkModal");

  addBtn?.addEventListener("click", () => {
    addModal.classList.remove("hidden");
    addModal.setAttribute("aria-hidden", "false");
    document.getElementById("bookmarkName").focus();
  });

  document.querySelectorAll("[data-close]").forEach(b => b.addEventListener("click", closeModals));
  document.getElementById("saveBookmarkBtn")?.addEventListener("click", saveBookmark);
  document.getElementById("updateBookmarkBtn")?.addEventListener("click", updateBookmark);

  [addModal, editModal].forEach(m => {
    m?.addEventListener("click", (e) => { if (e.target === m) closeModals(); });
  });
}

function closeModals() {
  document.querySelectorAll(".modal").forEach(m => {
    m.classList.add("hidden");
    m.setAttribute("aria-hidden", "true");
  });
  editingBookmarkIndex = -1;
}

function saveBookmark() {
  const name = document.getElementById("bookmarkName").value.trim();
  const url = document.getElementById("bookmarkUrl").value.trim();
  if (!name || !url) return;

  const data = JSON.parse(localStorage.getItem("bookmarks") || "[]");
  data.push({ id: String(Date.now()), name, url });
  localStorage.setItem("bookmarks", JSON.stringify(data));
  closeModals();
  renderBookmarks();
}

function openEditBookmark(index) {
  editingBookmarkIndex = index;
  const data = JSON.parse(localStorage.getItem("bookmarks") || "[]");
  const b = data[index];
  if (!b) return;

  document.getElementById("editBookmarkName").value = b.name;
  document.getElementById("editBookmarkUrl").value = b.url;

  const modal = document.getElementById("editBookmarkModal");
  modal.classList.remove("hidden");
  modal.setAttribute("aria-hidden", "false");
  document.getElementById("editBookmarkName").focus();
}

function updateBookmark() {
  if (editingBookmarkIndex < 0) return;
  const name = document.getElementById("editBookmarkName").value.trim();
  const url = document.getElementById("editBookmarkUrl").value.trim();

  const data = JSON.parse(localStorage.getItem("bookmarks") || "[]");
  data[editingBookmarkIndex] = { ...data[editingBookmarkIndex], name, url };
  localStorage.setItem("bookmarks", JSON.stringify(data));
  closeModals();
  renderBookmarks();
}

function deleteBookmark(index) {
  const data = JSON.parse(localStorage.getItem("bookmarks") || "[]");
  data.splice(index, 1);
  localStorage.setItem("bookmarks", JSON.stringify(data));
  renderBookmarks();
}

/* ===== Drag & Drop –¥–ª—è –∑–∞–∫–ª–∞–¥–æ–∫ ===== */

let dragSrcIndex = -1;

function dragStart(e) {
  dragSrcIndex = Number(e.currentTarget.dataset.index);
  e.dataTransfer.effectAllowed = "move";
}
function dragOver(e) {
  e.preventDefault();
  e.dataTransfer.dropEffect = "move";
}
function drop(e) {
  e.stopPropagation();
  const targetIndex = Number(e.currentTarget.dataset.index);
  if (dragSrcIndex === targetIndex) return;

  const data = JSON.parse(localStorage.getItem("bookmarks") || "[]");
  const [moved] = data.splice(dragSrcIndex, 1);
  data.splice(targetIndex, 0, moved);
  localStorage.setItem("bookmarks", JSON.stringify(data));
  renderBookmarks();
}
function dragEnd() { dragSrcIndex = -1; }

/* ===== Google services (–ø–æ–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω–æ –≤ HTML) ===== */
function setupGoogleServices(){ /* –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º */ }
